generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id             String        @id @default(uuid())
  name           String
  email          String        @unique
  phoneNumber    String?       @unique
  oauthProvider  String?
  profilePicture String
  password       String?
  isVerified     Boolean       @default(false)
  refferalCode   String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  carts          Cart?
  transactions   Transaction[]
  addresses      UserAddress[]
}

model UserAddress {
  id          Int       @id @default(autoincrement())
  userId      String
  phoneNumber String
  province    String
  city        String
  address     String
  lat         Decimal?  @db.Decimal(9, 6)
  lng         Decimal?  @db.Decimal(9, 6)
  isDefault   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  user        Users     @relation(fields: [userId], references: [id])
}

model Store {
  id         String         @id @default(uuid())
  province   String
  city       String
  address    String
  name       String
  lat        Decimal?       @db.Decimal(9, 6)
  lng        Decimal?       @db.Decimal(9, 6)
  radiusKm   Decimal        @db.Decimal(6, 2)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  deletedAt  DateTime?
  admins     Admin[]
  cartItems  CartProduct[]
  promos     PromoProduct[]
  storeStock StoreProduct[]
}

model Admin {
  id        String    @id @default(uuid())
  storeId   String?
  name      String
  email     String    @unique
  password  String
  isSuper   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  store     Store?    @relation(fields: [storeId], references: [id])
}

model ProductCategory {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  products    Product[]
}

model Product {
  id          String               @id @default(uuid())
  name        String
  description String
  slug        String               @unique
  price       Int
  zIndex      Int?
  picture1    String
  picture2    String?
  picture3    String?
  picture4    String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  deletedAt   DateTime?
  categoryId  String
  isActive    Boolean              @default(true)
  weight      Float?
  cartItems   CartProduct[]
  category    ProductCategory      @relation(fields: [categoryId], references: [id])
  promos      PromoProduct[]
  storeStock  StoreProduct[]
  trxProducts TransactionProduct[]
}

model StoreProduct {
  storeId   String
  productId String
  stock     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  product   Product   @relation(fields: [productId], references: [id])
  store     Store     @relation(fields: [storeId], references: [id])

  @@id([storeId, productId])
}

model PromoProduct {
  id                 String    @id @default(uuid())
  storeId            String
  productId          String
  discountPercentage Int
  discountNominal    Int
  picture            String?
  expiryDate         DateTime
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  product            Product   @relation(fields: [productId], references: [id])
  store              Store     @relation(fields: [storeId], references: [id])

  @@unique([productId, storeId])
}

model VoucherProduct {
  code        String        @id
  discount    Int?
  quota       Int
  maxDiscount Int
  expiredDate DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  trx         Transaction[]
}

model VoucherDelivery {
  code        String        @id
  discount    Int?
  quota       Int
  maxDiscount Int
  expiredDate DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  trx         Transaction[]
}

model Cart {
  id        String        @id @default(uuid())
  userId    String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
  user      Users         @relation(fields: [userId], references: [id])
  items     CartProduct[]
}

model CartProduct {
  id        String    @id @default(uuid())
  cartId    String
  productId String
  storeId   String
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  cart      Cart      @relation(fields: [cartId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
  store     Store     @relation(fields: [storeId], references: [id])
}

model Transaction {
  id                  String               @id @default(uuid())
  userId              String
  status              OrderStatus          @default(waiting_payment)
  shippingPrice       Int
  totalPrice          Int
  userAddress         String
  phoneNumber         String
  codeVoucherProduct  String?
  codeVoucherDelivery String?
  paymentProof        String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  deletedAt           DateTime?
  voucherDelivery     VoucherDelivery?     @relation(fields: [codeVoucherDelivery], references: [code])
  voucherProduct      VoucherProduct?      @relation(fields: [codeVoucherProduct], references: [code])
  user                Users                @relation(fields: [userId], references: [id])
  products            TransactionProduct[]
}

model TransactionProduct {
  id            String      @id @default(uuid())
  transactionId String
  productId     String
  quantity      Int
  price         Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?
  product       Product     @relation(fields: [productId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

enum OrderStatus {
  waiting_payment
  waiting_confirmation
  on_process
  shipped
  confirmed
  cancelled
}
